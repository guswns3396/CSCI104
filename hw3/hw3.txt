Problem 1:
	1) a list of experiment numbers
		history has order => list
	2) a set of student objects who earned an A
		the group of students have no order & should not have duplicates => set
	3) a map that maps a string of student name to a student object
		a name is an array of letters => string
		the name needs to correspond to a certain student => map
	4) a map that maps a char of grade to a set of student objects
		a letter grade is a character => char
		the grade needs to correspond to students => map
		the group of students have no order & should not have duplicates => set

Problem 2:
	linked list `5 -> 4 -> 3 -> 2 -> 1` is returned
	When funcA calls funcB, funcB calls itself until `funcB(5)` in which case it returns itself to
	`funcB(in->next)->next = in;` inside the function call `funcB(4)`. Therefore in this instance it becomes `5->next = in` and `in` is 4. Similarly, 4 returns itself to `funcB(in->next)->next = in;` inside function call `funcB(3)` in which case `4->next` = 3. The pattern keeps going until 1->next is null. Then funcA moves on to `return out` statement which returns 5.

Problem 3:
	a) theta(n^2)
		the innermost for loop only gets executed once during the entirety of the 2nd for loop and does work of theta(1)
		the 2nd for loop does i + 1 work each iteration of i including the innermost for loop
		therefore SUM(i=1,n,i) = theta(n^2)
	b) theta(n)
		work for recursive function func() given size of x => f(x) = f(x-1) + 1
		at each call it does theta(1) work and it is called x times => theta(x)
		the for loop runs log_2(n) times and each times does theta(2^(i-1)) work => 
		SUM(i=1,log_2(n),2^(i-1)) = 1+2+4+8+16 ... = SUM(i=0,log_2(n)-1,2^i) = theta(n)
	c) theta(n^3)
		the first for loop does theta(n) work
		the while loop at first iteration of 2nd for loop
			if & inner for loop executed only once => theta(n)
			the rest => theta(1)
			total for while loop at first iteration = theta(n) + 1 + 1 ... = theta(2n) = theta(n)
		the while loop at second iteration of 2nd for loop
			if & inner for loop executed n/2 times => n/2*theta(n) = theta(n^2)
			the rest => n/2*1 = theta(n)
			total for while loop at second iteration = theta(n^2)
		for the rest of the iteration of the 2nd for loop, the while loop does theta(n^2)
		total for 2nd loop = theta(n) + theta(n^2) + theta(n^2) ... = SUM(i=1,n-1,n^2) + theta(n)
		= theta(n^3) + theta(n) = theta(n^3)
	d) theta(n)
		work whenever it needs to resize = theta(3^x) where x represents the xth time resizing
		the rest = theta(1)
		the total => SUM(i=1,log_3(n),3^i) + SUM(i=1,n-log_3(n),1) = 3^(log_3(n)) + n-log_3(n)
		= n + n - log_3(n) = theta(n)